import * as React from 'react';
import * as THREE from 'three';
import { ReactThreeFiber } from '@react-three/fiber';
import { Brush as BrushImpl } from 'three-bvh-csg';
declare const TYPES: {
    subtraction: import("three-bvh-csg").CSGOperation;
    reverseSubtraction: import("three-bvh-csg").CSGOperation;
    addition: import("three-bvh-csg").CSGOperation;
    difference: import("three-bvh-csg").CSGOperation;
    intersection: import("three-bvh-csg").CSGOperation;
};
export declare type Brush = BrushImpl & {
    operator: keyof typeof TYPES;
    showOperation?: boolean;
};
declare global {
    namespace JSX {
        interface IntrinsicElements {
            brush: ReactThreeFiber.Object3DNode<Brush, typeof THREE.Mesh>;
        }
    }
}
export declare type CSGGeometryProps = {
    children?: React.ReactNode;
    /** Use material groups, each operation can have its own material, default: false */
    useGroups?: boolean;
    /** Show operation meshes, default: false */
    showOperations?: boolean;
    /** Re-compute vertx normals, default: false */
    computeVertexNormals?: boolean;
};
export declare type CSGGeometryApi = {
    computeVertexNormals: boolean;
    showOperations: boolean;
    useGroups: boolean;
    update: () => void;
};
export declare type CSGGeometryRef = CSGGeometryApi & {
    geometry: THREE.BufferGeometry;
    operations: THREE.Group;
};
export declare const Geometry: React.ForwardRefExoticComponent<CSGGeometryProps & React.RefAttributes<CSGGeometryRef>>;
export declare type BaseProps = JSX.IntrinsicElements['brush'];
export declare type BaseRef = Brush;
export declare const Base: React.ForwardRefExoticComponent<Pick<ReactThreeFiber.Object3DNode<Brush, typeof THREE.Mesh>, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "isBrush" | "markUpdated" | "isDirty" | "prepareGeometry" | "disposeCacheData" | "isMesh" | "type" | "geometry" | "material" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "getVertexPosition" | "isObject3D" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getObjectsByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "operator" | "showOperation" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers> & React.RefAttributes<Brush>>;
declare type OperationProps = Omit<BaseProps, 'operator'>;
export declare type AdditionProps = OperationProps;
export declare type AdditionRef = BaseRef;
export declare const Addition: React.ForwardRefExoticComponent<Pick<OperationProps, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "isBrush" | "markUpdated" | "isDirty" | "prepareGeometry" | "disposeCacheData" | "isMesh" | "type" | "geometry" | "material" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "getVertexPosition" | "isObject3D" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getObjectsByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "showOperation" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers> & React.RefAttributes<Brush>>;
export declare type SubtractionProps = OperationProps;
export declare type SubtractionRef = BaseRef;
export declare const Subtraction: React.ForwardRefExoticComponent<Pick<OperationProps, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "isBrush" | "markUpdated" | "isDirty" | "prepareGeometry" | "disposeCacheData" | "isMesh" | "type" | "geometry" | "material" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "getVertexPosition" | "isObject3D" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getObjectsByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "showOperation" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers> & React.RefAttributes<Brush>>;
export declare type ReverseSubtractionProps = OperationProps;
export declare type ReverseSubtractionRef = BaseRef;
export declare const ReverseSubtraction: React.ForwardRefExoticComponent<Pick<OperationProps, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "isBrush" | "markUpdated" | "isDirty" | "prepareGeometry" | "disposeCacheData" | "isMesh" | "type" | "geometry" | "material" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "getVertexPosition" | "isObject3D" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getObjectsByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "showOperation" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers> & React.RefAttributes<Brush>>;
export declare type DifferenceProps = OperationProps;
export declare type DifferenceRef = BaseRef;
export declare const Difference: React.ForwardRefExoticComponent<Pick<OperationProps, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "isBrush" | "markUpdated" | "isDirty" | "prepareGeometry" | "disposeCacheData" | "isMesh" | "type" | "geometry" | "material" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "getVertexPosition" | "isObject3D" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getObjectsByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "showOperation" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers> & React.RefAttributes<Brush>>;
export declare type IntersectionProps = OperationProps;
export declare type IntersectionRef = BaseRef;
export declare const Intersection: React.ForwardRefExoticComponent<Pick<OperationProps, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "isBrush" | "markUpdated" | "isDirty" | "prepareGeometry" | "disposeCacheData" | "isMesh" | "type" | "geometry" | "material" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "getVertexPosition" | "isObject3D" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getObjectsByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "showOperation" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers> & React.RefAttributes<Brush>>;
export declare function useCSG(): CSGGeometryApi;
export {};
